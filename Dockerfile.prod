FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    libpq-dev \
    postgresql-client \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better caching
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Copy and make init script executable
COPY init-db.sh /usr/local/bin/init-db.sh
RUN chmod +x /usr/local/bin/init-db.sh

# Create non-root user
RUN useradd --create-home --shell /bin/bash app && chown -R app:app /app
USER app

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Create startup script
RUN echo '#!/bin/bash\n\
set -euo pipefail\n\
\n\
# Wait for database to be ready\n\
echo "Waiting for database to be ready..."\n\
until pg_isready -h $${DATABASE_HOST:-db} -p $${DATABASE_PORT:-5432} -U $${DATABASE_USER:-postgres}; do\n\
  echo "Database is unavailable - sleeping"\n\
  sleep 2\n\
done\n\
\n\
# Run database initialization if needed\n\
if [ "$${INIT_DB:-false}" = "true" ]; then\n\
  echo "Initializing database..."\n\
  /usr/local/bin/init-db.sh\n\
fi\n\
\n\
# Debug environment\n\
echo "=== DEBUG INFO ==="\n\
echo "Environment: $${ENVIRONMENT}"\n\
echo "Port: $${PORT:-8000}"\n\
echo "Database URL (first 50 chars): $${DATABASE_URL_ASYNC:0:50}..."\n\
echo "Redis URL (first 50 chars): $${REDIS_URL:0:50}..."\n\
echo "Secret Key set: $${SECRET_KEY:+YES}"\n\
echo "GCS Bucket: $${GCS_BUCKET_NAME}"\n\
echo "=================="\n\
\n\
# Test database connection\n\
echo "Testing database connection..."\n\
python3 -c "\n\
import os\n\
import asyncio\n\
import asyncpg\n\
\n\
async def test_db():\n\
    try:\n\
        db_url = os.getenv('DATABASE_URL_ASYNC')\n\
        if not db_url:\n\
            print('ERROR: DATABASE_URL_ASYNC not set')\n\
            return False\n\
        \n\
        # Convert to asyncpg format\n\
        if db_url.startswith('postgresql://'):\n\
            db_url = db_url.replace('postgresql://', 'postgresql+asyncpg://')\n\
        \n\
        conn = await asyncpg.connect(db_url)\n\
        await conn.close()\n\
        print('Database connection: SUCCESS')\n\
        return True\n\
    except Exception as e:\n\
        print(f'Database connection: FAILED - {e}')\n\
        return False\n\
\n\
asyncio.run(test_db())\n\
" || echo "Database test failed, but continuing..."\n\
\n\
# Run migrations\n\
echo "Running database migrations..."\n\
python3 scripts/migrate.py --env production || {\n\
  echo "Migration failed, but continuing startup..."\n\
}\n\
\n\
# Start the application\n\
echo "Starting application on port $${PORT:-8000}..."\n\
exec uvicorn app.main:app --host 0.0.0.0 --port $${PORT:-8000}\n\
' > /app/start.sh && chmod +x /app/start.sh

# Run the application
CMD ["/app/start.sh"]
