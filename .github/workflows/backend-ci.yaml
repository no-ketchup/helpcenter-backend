name: Backend CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'

permissions:
  contents: read
  security-events: write

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy pytest-cov

    - name: Run linting
      run: |
        flake8 app/ --max-line-length=100 --ignore=E203,W503,F821,E402
        black --check app/ --line-length=100
        isort --check-only app/ --profile black

    # - name: Run type checking
    #   run: mypy app/ --ignore-missing-imports --explicit-package-bases

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Run tests using Docker Compose
      run: |
        # Set up environment for CI
        export TEST_DATABASE_URL_ASYNC=postgresql+asyncpg://postgres:postgres@localhost:5432/test_db
        export ENVIRONMENT=test
        export PYTHONPATH=/code
        export PYTHONDONTWRITEBYTECODE=1
        
        # Start services
        docker compose up -d db redis
        
        # Wait for services to be ready
        sleep 5
        
        # Run migrations
        docker compose run --rm \
          -e PYTHONPATH=/code \
          -e ENVIRONMENT=test \
          -e TEST_DATABASE_URL_ASYNC=postgresql+asyncpg://postgres:postgres@localhost:5432/test_db \
          backend python3 scripts/migrate.py --env test --database-url postgresql+asyncpg://postgres:postgres@localhost:5432/test_db
        
        # Run tests
        docker compose run --rm \
          -e PYTHONPATH=/code \
          -e ENVIRONMENT=test \
          -e PYTHONDONTWRITEBYTECODE=1 \
          -e TEST_DATABASE_URL_ASYNC=postgresql+asyncpg://postgres:postgres@localhost:5432/test_db \
          backend bash -lc 'cd /code && pytest -c /code/pytest.ini -q --disable-warnings --maxfail=1 -v --cov=app --cov-report=xml --cov-report=html'
        
        # Cleanup
        docker compose down -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        # Build production Docker image directly
        docker build -f Dockerfile.prod -t helpcenter-backend:latest .

    - name: Test Docker image
      run: |
        # Test the built image
        docker run --rm -d --name test-container -p 8000:8000 \
          -e DATABASE_URL_ASYNC=${{ secrets.DATABASE_URL }} \
          -e REDIS_URL=${{ secrets.REDIS_URL }} \
          -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
          helpcenter-backend:latest
        sleep 15
        curl -f http://localhost:8000/health || exit 1
        docker stop test-container

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}

    - name: Deploy to Cloud Run (Staging)
      run: |
        export GOOGLE_CLOUD_PROJECT=${{ secrets.GOOGLE_CLOUD_PROJECT }}
        export GOOGLE_CLOUD_REGION=${{ secrets.GOOGLE_CLOUD_REGION }}
        export DATABASE_URL_ASYNC=${{ secrets.DATABASE_URL }}
        export REDIS_URL=${{ secrets.REDIS_URL }}
        export SECRET_KEY=${{ secrets.SECRET_KEY }}
        export DEV_EDITOR_KEY=${{ secrets.DEV_EDITOR_KEY }}
        export GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }}
        export ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS }}
        export GOOGLE_APPLICATION_CREDENTIALS_SECRET=${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_SECRET }}
        
        ./scripts/deploy-cloud-run.sh staging

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}

    - name: Deploy to Cloud Run (Production)
      run: |
        export GOOGLE_CLOUD_PROJECT=${{ secrets.GOOGLE_CLOUD_PROJECT }}
        export GOOGLE_CLOUD_REGION=${{ secrets.GOOGLE_CLOUD_REGION }}
        export DATABASE_URL_ASYNC=${{ secrets.DATABASE_URL }}
        export REDIS_URL=${{ secrets.REDIS_URL }}
        export SECRET_KEY=${{ secrets.SECRET_KEY }}
        export DEV_EDITOR_KEY=${{ secrets.DEV_EDITOR_KEY }}
        export GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }}
        export ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS }}
        export GOOGLE_APPLICATION_CREDENTIALS_SECRET=${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_SECRET }}
        
        ./scripts/deploy-cloud-run.sh production
