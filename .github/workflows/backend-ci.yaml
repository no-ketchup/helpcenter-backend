name: Backend CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'

permissions:
  contents: read
  security-events: write

jobs:
  test:
    runs-on: ubuntu-latest

    # Note: Using Docker Compose for database instead of services to avoid port conflicts

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy pytest-cov

    - name: Run linting
      run: |
        flake8 app/ --max-line-length=100 --ignore=E203,W503,F821,E402
        black --check app/ --line-length=100
        isort --check-only app/ --profile black

    # - name: Run type checking
    #   run: mypy app/ --ignore-missing-imports --explicit-package-bases

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Run tests using Docker Compose
      run: |
        # Set up environment variables for CI
        export POSTGRES_USER=postgres
        export POSTGRES_PASSWORD=postgres
        export POSTGRES_DB=test_db
        export POSTGRES_PORT=5433
        export DATABASE_URL_ASYNC=postgresql+asyncpg://postgres:postgres@db:5432/test_db
        export TEST_DATABASE_URL_ASYNC=postgresql+asyncpg://postgres:postgres@db:5432/test_db
        export ENVIRONMENT=test
        export PYTHONPATH=/code
        export PYTHONDONTWRITEBYTECODE=1
        
        # Start services and run tests
        docker compose up -d db redis
        sleep 5
        docker compose run --rm -e PYTHONPATH=/code -e ENVIRONMENT=test -e DATABASE_URL_ASYNC=postgresql+asyncpg://postgres:postgres@db:5432/test_db -e TEST_DATABASE_URL_ASYNC=postgresql+asyncpg://postgres:postgres@db:5432/test_db backend python3 scripts/migrate.py --env test --database-url postgresql+asyncpg://postgres:postgres@db:5432/test_db
        docker compose run --rm \
          -e PYTHONPATH=/code \
          -e ENVIRONMENT=test \
          -e PYTHONDONTWRITEBYTECODE=1 \
          -e DATABASE_URL_ASYNC=postgresql+asyncpg://postgres:postgres@db:5432/test_db \
          -e TEST_DATABASE_URL_ASYNC=postgresql+asyncpg://postgres:postgres@db:5432/test_db \
          backend bash -lc 'cd /code && find /code -name __pycache__ -type d -prune -exec rm -rf {} +; pytest -c /code/pytest.ini -q --disable-warnings --maxfail=1 -v'
        docker compose down -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Trivy config
      run: |
        cat > trivy.yaml << EOF
        db:
          repository: ghcr.io/aquasecurity/trivy-db
        EOF

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.33.0
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        trivy-config: 'trivy.yaml'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    environment: prod
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Debug secrets
      run: |
        echo "HELPCENTER_CICD available: ${{ secrets.HELPCENTER_CICD != '' }}"
        echo "GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}"
        echo "Environment: ${{ github.ref_name }}"
        echo "Event: ${{ github.event_name }}"

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.HELPCENTER_CICD }}

    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:latest

    - name: Build Docker image
      run: |
        # Build production Docker image directly
        docker build -f Dockerfile.prod -t helpcenter-backend:latest .
        
        # Tag for GCP
        docker tag helpcenter-backend:latest gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT }}/helpcenter-backend:${{ github.sha }}
        docker tag helpcenter-backend:latest gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT }}/helpcenter-backend:latest

    - name: Push Docker image
      run: |
        gcloud auth configure-docker gcr.io --quiet
        docker push gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT }}/helpcenter-backend:${{ github.sha }}
        docker push gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT }}/helpcenter-backend:latest


    - name: Test Docker image
      run: |
        # Test that the Docker image can start (basic container test)
        docker run --rm -d --name test-container -p 8000:8000 \
          -e ENVIRONMENT=test \
          -e DATABASE_URL_ASYNC=postgresql+asyncpg://test:test@localhost:5432/test_db \
          -e REDIS_URL=redis://localhost:6379 \
          -e SECRET_KEY=${{ secrets.SECRET_KEY || 'test-secret-key' }} \
          -e DEV_EDITOR_KEY=${{ secrets.DEV_EDITOR_KEY || 'test-editor-key' }} \
          -e GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME || 'test-bucket' }} \
          -e ALLOWED_ORIGINS=http://localhost:3000 \
          helpcenter-backend:latest
        sleep 10
        # Check if container is still running (basic health check)
        if docker ps | grep -q test-container; then
          echo "Container started successfully"
          docker stop test-container
        else
          echo "Container failed to start"
          docker logs test-container
          exit 1
        fi

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.HELPCENTER_CICD }}

    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2

    - name: Deploy to Cloud Run (Staging)
      env:
        GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
        GOOGLE_CLOUD_REGION: ${{ secrets.GOOGLE_CLOUD_REGION }}
        DATABASE_URL_ASYNC: ${{ secrets.DATABASE_URL }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DEV_EDITOR_KEY: ${{ secrets.DEV_EDITOR_KEY }}
        GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
        ALLOWED_ORIGINS: ${{ secrets.ALLOWED_ORIGINS }}
        HELPCENTER_GCS: ${{ secrets.HELPCENTER_GCS }}
      run: ./scripts/deploy-cloud-run.sh staging

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: prod

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.HELPCENTER_CICD }}

    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2

    - name: Deploy to Cloud Run (Production)
      env:
        GITHUB_SHA: ${{ github.sha }}
        GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
        GOOGLE_CLOUD_REGION: ${{ secrets.GOOGLE_CLOUD_REGION }}
        DATABASE_URL_ASYNC: ${{ secrets.DATABASE_URL }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DEV_EDITOR_KEY: ${{ secrets.DEV_EDITOR_KEY }}
        GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
        ALLOWED_ORIGINS: ${{ secrets.ALLOWED_ORIGINS }}
        HELPCENTER_GCS: ${{ secrets.HELPCENTER_GCS }}
      run: ./scripts/deploy-cloud-run.sh production
