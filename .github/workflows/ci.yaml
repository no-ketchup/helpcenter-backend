name: HelpCenter Backend CI/CD (UV)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

permissions:
  contents: read
  id-token: write
  security-events: write

jobs:
  # Detect changes
  changes:
    runs-on: ubuntu-latest
    outputs:
      common: ${{ steps.changes.outputs.common }}
      graphql_api: ${{ steps.changes.outputs.graphql_api }}
      editor_api: ${{ steps.changes.outputs.editor_api }}
      tests: ${{ steps.changes.outputs.tests }}
      scripts: ${{ steps.changes.outputs.scripts }}
      workflows: ${{ steps.changes.outputs.workflows }}
    steps:
      - uses: actions/checkout@v4
      - id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            common:
              - 'common/**'
            graphql_api:
              - 'graphql_api/**'
            editor_api:
              - 'editor_api/**'
            tests:
              - 'tests/**'
            scripts:
              - 'scripts/**'
            workflows:
              - '.github/workflows/**'

  # Component test workflow calls
  test-common:
    uses: ./.github/workflows/test.yaml
    needs: changes
    with:
      module: common
      test_path: tests/unit/
    secrets: inherit
    if: |
      needs.changes.outputs.common == 'true' ||
      needs.changes.outputs.tests == 'true' ||
      needs.changes.outputs.workflows == 'true'

  test-graphql:
    uses: ./.github/workflows/test.yaml
    needs: [changes, test-common]
    with:
      module: graphql_api
      test_path: tests/integration/graphql_api/
    secrets: inherit
    if: |
      needs.changes.outputs.graphql_api == 'true' ||
      needs.changes.outputs.common == 'true' ||
      needs.changes.outputs.tests == 'true' ||
      needs.changes.outputs.workflows == 'true'

  test-editor:
    uses: ./.github/workflows/test.yaml
    needs: [changes, test-common]
    with:
      module: editor_api
      test_path: tests/integration/editor_api/
    secrets: inherit
    if: |
      needs.changes.outputs.editor_api == 'true' ||
      needs.changes.outputs.common == 'true' ||
      needs.changes.outputs.tests == 'true' ||
      needs.changes.outputs.workflows == 'true'

  test-integration:
    runs-on: ubuntu-latest
    needs: [ changes, test-common, test-graphql, test-editor ]
    if: always()

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: [ "5432:5432" ]

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: [ "6379:6379" ]

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-uv
      - uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/uv
          key: uv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('uv.lock') }}
      - run: uv run python -m alembic upgrade head
        env:
          TEST_DATABASE_URL_ASYNC: postgresql+asyncpg://test:test@localhost:5432/test_db
          ENVIRONMENT: test
      - run: uv run pytest tests/integration/ -v
        env:
          TEST_DATABASE_URL_ASYNC: postgresql+asyncpg://test:test@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          ENVIRONMENT: test
          SECRET_KEY: test-secret-key
          DEV_EDITOR_KEY: test-editor-key
          GCS_BUCKET_NAME: test-bucket
          ALLOWED_ORIGINS: http://localhost:3000

  security:
    runs-on: ubuntu-latest
    needs: changes
    if: |
      needs.changes.outputs.common == 'true' ||
      needs.changes.outputs.graphql_api == 'true' ||
      needs.changes.outputs.editor_api == 'true' ||
      needs.changes.outputs.workflows == 'true'

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-uv
      - uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/uv
          key: uv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('uv.lock') }}
      - name: Run Bandit security scan
        run: uv run bandit -r common/ graphql_api/ editor_api/ -f sarif -o bandit.sarif || true
      - uses: github/codeql-action/upload-sarif@v3
        if: ${{ hashFiles('bandit.sarif') != '' }}
        with:
          sarif_file: bandit.sarif

  # Deployments
  deploy-graphql:
    needs: [changes, test-common, test-graphql, test-integration, security]
    uses: ./.github/workflows/cloudrun-deploy.yaml
    with:
      service: graphql_api
    secrets: inherit
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      (
        needs.changes.outputs.graphql_api == 'true' ||
        needs.changes.outputs.common == 'true' ||
        needs.changes.outputs.scripts == 'true' ||
        needs.changes.outputs.workflows == 'true'
      ) &&
      (needs.test-common.result == 'success' || needs.test-common.result == 'skipped') &&
      (needs.test-graphql.result == 'success' || needs.test-graphql.result == 'skipped') &&
      needs.test-integration.result == 'success' &&
      (needs.security.result == 'success' || needs.security.result == 'skipped')

  deploy-editor:
    needs: [changes, test-common, test-editor, test-integration, security]
    uses: ./.github/workflows/cloudrun-deploy.yaml
    with:
      service: editor_api
    secrets: inherit
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      (
        needs.changes.outputs.editor_api == 'true' ||
        needs.changes.outputs.common == 'true' ||
        needs.changes.outputs.scripts == 'true' ||
        needs.changes.outputs.workflows == 'true'
      ) &&
      (needs.test-common.result == 'success' || needs.test-common.result == 'skipped') &&
      (needs.test-editor.result == 'success' || needs.test-editor.result == 'skipped') &&
      needs.test-integration.result == 'success' &&
      (needs.security.result == 'success' || needs.security.result == 'skipped')
